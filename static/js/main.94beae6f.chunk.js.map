{"version":3,"sources":["modules/tournament.ts","modules/player.ts","hooks/useTournament.tsx","hooks/usePlayer.tsx","components/StatSelectModal.tsx","components/TournamentSelect.tsx","components/PlayerSelector.tsx","components/PlayerBox.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["getTournamentDataAPI","tournament","a","axios","get","getTournamentDataAsync","createAsyncAction","createAction","createReducer","pending","error","data","state","action","payload","addPlayer","id","player","removePlayer","removeAll","changeSelectedStat","flag","stat","allCheckSelectedStat","changeTournament","getNewMaxStats","players","statList","maxStats","i","length","name","Math","max","Number","replace","desc","selectedStat","count","newPlayers","map","p","slice","splice","push","filter","item","useTournament","useSelector","dispatch","useDispatch","useEffect","request","success","failure","response","console","log","tournamentActions","playerActions","usePlayer","handleAddPlayer","e","handleRemoveSelect","handleChange","target","value","handleChangeCheck","checked","handleAllCheck","StatSelectModal","useState","show","setShow","handleClose","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","checkFlag","includes","Form","Check","key","type","label","onChange","Footer","TournamentSelect","Control","as","size","placeholder","list","ChoosePlayer","styled","div","PlayerInfo","ImgWrap","InfoWrap","RemovePlayer","PlayerSelector","Object","keys","src","Player","onError","currentTarget","onerror","alt","Position","style","alignSelf","className","height","width","columnDefs","headerName","field","sortable","rowData","onRowClicked","ProgressWrap","styledComponentsTS","attrs","props","ProgressDiv","Progress","val","maxStat","mark","color","BadgeWrap","span","PlayerBox","padding","Badge","nav","MenuWrap","SelectWrap","MainContainer","MainWrapper","main","PlayerBoxSection","section","Main","Spinner","animation","role","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.94beae6f.chunk.js","sourcesContent":["import {createAction} from 'redux-actions';\r\nimport {createAsyncAction, ActionType, createReducer} from 'typesafe-actions';\r\nimport axios, {AxiosResponse} from 'axios';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from '.';\r\n\r\nasync function getTournamentDataAPI(tournament: string) {\r\n    return await axios.get(`jsonData/${tournament}.json`);\r\n}\r\n\r\nconst GET_TOURNAMENT_DATA_PENDING = 'tournament/GET_TOURNAMENT_DATA_PENDING';\r\nconst GET_TOURNAMENT_DATA_SUCCESS = 'tournament/GET_TOURNAMENT_DATA_SUCCESS';\r\nconst GET_TOURNAMENT_DATA_FAILURE = 'tournament/GET_TOURNAMENT_DATA_FAILURE';\r\nconst CHANGE_TOURNAMNET = 'tournament/CHANGE_TOURNAMENT';\r\n\r\nexport const getTournamentDataAsync = createAsyncAction(\r\n    GET_TOURNAMENT_DATA_PENDING,\r\n    GET_TOURNAMENT_DATA_SUCCESS,\r\n    GET_TOURNAMENT_DATA_FAILURE\r\n)<undefined, AxiosResponse, boolean>();\r\n\r\nexport function getTournamentData(tournament: string): ThunkAction<void, RootState, null, TournamentAction> { \r\n    return async dispatch => {\r\n        const {request, success, failure} = getTournamentDataAsync;\r\n        dispatch(request());\r\n        try{\r\n            const response = await getTournamentDataAPI(tournament);\r\n            dispatch(success(response));\r\n        } catch(error) {\r\n            console.log(error);\r\n            dispatch(failure(true));\r\n            throw(error);\r\n        }\r\n    };\r\n}\r\nexport const changeTournament = createAction(CHANGE_TOURNAMNET, (tournament: string) => tournament);\r\n\r\n\r\n\r\ntype TournametState = {\r\n    pending: boolean;\r\n    error: boolean;\r\n    data: Object[];\r\n}\r\n\r\ntype TournamentAction = ActionType<typeof getTournamentDataAsync>;\r\n\r\n\r\n\r\n\r\n\r\nconst initialState: TournametState = {\r\n    pending: false,\r\n    error: false,\r\n    data: [],\r\n}\r\n\r\n\r\nconst tournament = createReducer<TournametState, TournamentAction>(initialState, {\r\n    [GET_TOURNAMENT_DATA_PENDING] : state => ({\r\n        ...state,\r\n        pending: true,\r\n        error: false\r\n    }),\r\n    [GET_TOURNAMENT_DATA_SUCCESS] : (state, action) => ({\r\n        ...state,\r\n        pending: false,\r\n        data: action.payload.data\r\n    }),\r\n    [GET_TOURNAMENT_DATA_FAILURE]: state => ({\r\n        ...state,\r\n        pending: false,\r\n        error: true\r\n    })\r\n})\r\n\r\nexport default tournament;","import {createAction} from 'redux-actions';\r\nimport {ActionType, createReducer} from 'typesafe-actions';\r\n\r\nconst ADD_PLAYER = 'player/ADD_PLAYER';\r\nconst REMOVE_PLAYER = 'player/REMOVE_PLAYER';\r\nconst REMOVE_ALL = 'player/REMOVE_ALL';\r\nconst CHANGE_SELECTED_STAT = 'player/CHANGE_SELECTED_STAT';\r\nconst ALL_CHECK_SELECTED_STAT = 'player/ALL_CHECK_SELECTED_STAT';\r\nconst CHANGE_TOURNAMNET = 'player/CHANGE_TOURNAMENT';\r\n\r\nexport const addPlayer = createAction(ADD_PLAYER, (id: number, player: object) => ({id, player}));\r\nexport const removePlayer = createAction(REMOVE_PLAYER, (id: number) => id);\r\nexport const removeAll = createAction(REMOVE_ALL);\r\nexport const changeSelectedStat = createAction(CHANGE_SELECTED_STAT, (flag: boolean, stat: string) => ({flag, stat}));\r\nexport const allCheckSelectedStat = createAction(ALL_CHECK_SELECTED_STAT);\r\nexport const changeTournament = createAction(CHANGE_TOURNAMNET, (tournament: string) => tournament);\r\n\r\nconst actions = {addPlayer, removePlayer, removeAll, changeSelectedStat, allCheckSelectedStat, changeTournament};\r\ntype playerAction = ActionType<typeof actions>;\r\n\r\ntype playerState = {\r\n    players: {[index: string]:any};\r\n    maxStats: {[index: string]:any};\r\n    statList: stat[];\r\n    selectedStat: string[];\r\n    tournament: string;\r\n}\r\n\r\ntype stat = {\r\n    name: string,\r\n    desc: string\r\n}\r\n\r\nconst initialState = {\r\n    players: [{}, {}, {}, {}, {}],\r\n    maxStats: {},\r\n    statList: [ {name: 'Games', desc: ''},\r\n                {name: 'Win rate', desc: ''},\r\n                {name: 'KDA', desc: ''},\r\n                {name: 'Avg kills', desc: ''},\r\n                {name: 'Avg deaths', desc: ''},\r\n                {name: 'Avg assists', desc: ''},\r\n                {name: 'CSM', desc: 'Average CS per minute per game'},\r\n                {name: 'GPM', desc: 'Average Gold per minute per game'},\r\n                {name: 'KP%', desc: 'Average Kill Participation per game'},\r\n                {name: 'DMG%', desc: 'Average share of team\\'s total damage to champions per game'},\r\n                {name: 'DPM', desc: 'Average damage to champions per minute per game'},\r\n                {name: 'VSPM', desc: 'Average Vision score per minute per game'},\r\n                {name: 'Avg WPM', desc: 'Average Wards per minute per game'},\r\n                {name: 'Avg WCPM', desc: 'Average Wards cleared per minute per game'},\r\n                {name: 'Avg VWPM', desc: 'Average Vision wards per minute per game'},\r\n                {name: 'GD@15', desc: 'Average Gold differential at 15 min'},\r\n                {name: 'CSD@15', desc: 'Average CS differential at 15 min'},\r\n                {name: 'XPD@15', desc: 'Average XP differential at 15 min'},\r\n                {name: 'FB %', desc: 'Firstblood participation(kill or assist)'},\r\n                {name: 'FB Victim', desc: 'Firstblood victim %'},\r\n                {name: 'Penta Kills', desc: 'Total pentakills'},\r\n                {name: 'Solo Kills', desc: 'Total solokills'}\r\n            ],\r\n    selectedStat: ['Games','Win rate','KDA','Avg kills','Avg deaths','Avg assists','KP%','DMG%','DPM'],\r\n    tournament: 'Mid-Season Cup 2020'\r\n}\r\n\r\nconst getNewMaxStats = (players: any, statList: stat[]) => {\r\n    let maxStats: {[k: string]: any} = {};\r\n    for(let i=0; i<statList.length; i++){\r\n        maxStats[statList[i].name] = \r\n            Math.max( typeof(players[0][statList[i].name]) === 'number' ? players[0][statList[i].name] : Number((players[0][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[1][statList[i].name]) === 'number' ? players[1][statList[i].name] : Number((players[1][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[2][statList[i].name]) === 'number' ? players[2][statList[i].name] : Number((players[2][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[3][statList[i].name]) === 'number' ? players[3][statList[i].name] : Number((players[3][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[4][statList[i].name]) === 'number' ? players[4][statList[i].name] : Number((players[4][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    );\r\n    }\r\n    return maxStats;\r\n}\r\n\r\nconst player = createReducer<playerState, playerAction>(initialState, {\r\n    [ADD_PLAYER]: (state, action) => {\r\n        let count = 0;\r\n        const newPlayers = state.players.map((p: any) => {\r\n            count++;\r\n            return count === action.payload.id ? action.payload.player : p;\r\n        });\r\n        return {...state, players: newPlayers, maxStats: getNewMaxStats(newPlayers, state.statList)}\r\n    },\r\n    [REMOVE_PLAYER]: (state, action) => {\r\n        let newPlayers = state.players.slice();\r\n        newPlayers.splice(action.payload-1, 1);\r\n        newPlayers.push({});\r\n        return {...state, players: newPlayers, maxStats: getNewMaxStats(newPlayers, state.statList)}\r\n    },\r\n    [REMOVE_ALL]: (state) => ({...state, players: [{}, {}, {}, {}, {}]}),\r\n    [CHANGE_SELECTED_STAT]: (state, action) => {\r\n        const {flag, stat} = action.payload;\r\n        if(flag){\r\n            return {...state, selectedStat: [...state.selectedStat, stat]}\r\n        }\r\n        else {\r\n            return {...state, selectedStat: state.selectedStat.filter(item => item !== stat)}\r\n        }\r\n    },\r\n    [ALL_CHECK_SELECTED_STAT]: (state) => {\r\n        const selectedStat = state.statList.length !== state.selectedStat.length ?\r\n                                state.statList.map(item => item.name) :\r\n                                [];\r\n        return {\r\n            ...state,\r\n            selectedStat: selectedStat\r\n        }\r\n    },\r\n    [CHANGE_TOURNAMNET]: (state, action) => {\r\n        return {\r\n            ...state,\r\n            tournament: action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport default player;","import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as tournamentActions from '../modules/tournament';\r\nimport * as playerActions from '../modules/player';\r\nimport {RootState} from '../modules';\r\n\r\nconst useTournament = () => {\r\n    const {pending, error, data} = useSelector((state: RootState) => state.tournament);\r\n    const {tournament} = useSelector((state: RootState) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(tournamentActions.getTournamentData(tournament));\r\n        dispatch(playerActions.removeAll());\r\n    }, [dispatch, tournament]);\r\n\r\n    return {\r\n        pending, error, data\r\n    };\r\n}\r\n\r\nexport default useTournament;","import {useDispatch, useSelector} from 'react-redux';\r\nimport * as playerActions from '../modules/player';\r\nimport {RootState} from '../modules';\r\n\r\nconst usePlayer = () => {\r\n    const {players, maxStats, selectedStat, statList, tournament} = useSelector((state: RootState) => state.player);\r\n    const {data} = useSelector((state: RootState) => state.tournament);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleAddPlayer = (e: any, id: number) => {\r\n        dispatch(playerActions.addPlayer(id, e.data));\r\n    }\r\n\r\n    const handleRemoveSelect = (id: number) => {\r\n        dispatch(playerActions.removePlayer(id));\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(playerActions.changeTournament(e.target.value));\r\n    }\r\n\r\n    const handleChangeCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(playerActions.changeSelectedStat(e.target.checked, e.target.id));\r\n    }\r\n\r\n    const handleAllCheck = () => {\r\n        dispatch(playerActions.allCheckSelectedStat());\r\n    }\r\n\r\n    return {\r\n        players, maxStats, selectedStat, statList, tournament, data, handleAddPlayer, handleRemoveSelect, handleChange, handleChangeCheck, handleAllCheck\r\n    };\r\n}\r\n\r\nexport default usePlayer;","import React, {useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport usePlayer from '../hooks/usePlayer';\r\n\r\nconst StatSelectModal = () => {\r\n    const {statList, selectedStat, handleChangeCheck, handleAllCheck} = usePlayer();\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Stat View/Hide\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Stat View/Hide</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {statList.map( stat => {\r\n                        const {name, desc} = stat;\r\n                        const checkFlag = selectedStat.includes(name) ;\r\n                        return <Form.Check \r\n                                    key={name} \r\n                                    type='checkbox' \r\n                                    id={name} \r\n                                    label={<><b>{name}</b><small>{desc?' - ' + desc:''}</small></>}\r\n                                    onChange={handleChangeCheck} \r\n                                    checked={checkFlag}\r\n                                />\r\n                    })}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleAllCheck}>\r\n                    All Check\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StatSelectModal;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport usePlayer from '../hooks/usePlayer';\r\n\r\nconst TournamentSelect = () => {\r\n    const {handleChange} = usePlayer();\r\n    const tournamentList = [\r\n        'Mid-Season Cup 2020',\r\n        'LCK Spring 2020',\r\n        'LPL Spring 2020',\r\n        'LEC Spring 2020',\r\n        'LCS Spring 2020',\r\n        'World Championship 2019',\r\n        'LCK Summer 2019',\r\n        'LPL Summer 2019',\r\n        'LEC Summer 2019',\r\n        'LCS Summer 2019',\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Form.Control as='select' size='sm' placeholder=\"Select tournament\" onChange={handleChange}>\r\n                {tournamentList.map(list => <option key={list}>{list}</option>)}\r\n            </Form.Control>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TournamentSelect;","import React, {useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport usePlayer from '../hooks/usePlayer';\r\nimport styled from 'styled-components';\r\n\r\ntype props = {\r\n    id: number;\r\n}\r\n\r\nconst PlayerSelector = ({id}: props) => {\r\n    const {players, data, handleRemoveSelect, handleAddPlayer} = usePlayer();\r\n    const [show, setShow] = useState(false);\r\n    \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const columnDefs: {headerName: string, field: string, sortable: boolean, width: number, filter?: boolean}[] = [\r\n        {headerName: 'Player', field: 'Player', sortable: true, filter: true, width: 150},\r\n        {headerName: 'Position', field: 'Position', sortable: true, width: 150},\r\n        {headerName: 'Games', field: 'Games', sortable: true, width: 130},\r\n    ];\r\n\r\n    return(\r\n        <>\r\n            {Object.keys(players[id-1]).length === 0 ? \r\n                <ChoosePlayer onClick={handleShow}>\r\n                    <p><b>Choose<br/> Player</b></p>\r\n                </ChoosePlayer> : \r\n                <PlayerInfo>\r\n                    <RemovePlayer onClick={(e) => handleRemoveSelect(id)}>&times;</RemovePlayer>\r\n                    <ImgWrap>\r\n                        <img src={`player/${players[id-1].Player}.png`} onError={(e)=>{e.currentTarget.onerror = null; e.currentTarget.src='player/noplayer.png'}} \r\n                             alt={players[id-1].Player}></img>\r\n                    </ImgWrap>\r\n                    <InfoWrap>\r\n                        <img src={`position/${players[id-1].Position}.png`} alt={players[id-1].Position}></img>\r\n                        <h4 style={{alignSelf:'center'}}><b>{players[id-1].Player}</b></h4>\r\n                    </InfoWrap>\r\n                </PlayerInfo>\r\n            }\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Players</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"ag-theme-alpine\" style={ {height: '700px', width: '450px'} }>\r\n                        <AgGridReact\r\n                            columnDefs={columnDefs}\r\n                            rowData={data}\r\n                            onRowClicked={(e: any) => {handleAddPlayer(e, id); handleClose()}}>\r\n                        </AgGridReact>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// styled-components\r\nconst ChoosePlayer = styled.div`\r\n    // border: solid #ccc;\r\n    // border-style: dashed;\r\n    // border-radius: 25px; \r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    text-shadow: 5px 5px 0 #e2e2e2;\r\n    font-size: 1.5rem;\r\n    color: #909090;\r\n    height: -webkit-fill-available;\r\n    justify-content: center;\r\n    text-align: center;\r\n    background-image: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.8)), url('choose-player.png');\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    min-height: 500px;\r\n`;\r\n\r\nconst PlayerInfo = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    flex-flow: column;\r\n    position: relative;\r\n`;\r\n\r\nconst ImgWrap = styled.div`\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    border-radius: 50%;\r\n    margin: 1rem .3rem .3rem .3rem;\r\n    border: 1px inset;\r\n`;\r\n\r\nconst InfoWrap = styled.div`\r\n    display: flex;\r\n\r\n    @media screen and (max-width: 1420px) {\r\n        flex-flow: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nconst RemovePlayer = styled.div`\r\n    position: absolute;\r\n    top: 3px;\r\n    right: 3px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    font-size: larger;\r\n    padding: 3px 10px;\r\n`;\r\n\r\nexport default PlayerSelector;","import React from 'react';\r\nimport usePlayer from '../hooks/usePlayer';\r\nimport styled from 'styled-components';\r\nimport styledComponentsTS from 'styled-components-ts';\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\ntype props = {\r\n    id: number;\r\n}\r\n\r\nconst PlayerBox = ({id}: props) => {\r\n    const {players, selectedStat, maxStats} = usePlayer();\r\n\r\n    return (\r\n        <div style={{padding: '1rem 0 1rem 0'}}>\r\n            <div>\r\n                {Object.keys(players[id-1]).length > 0 \r\n                ? Object.keys(players[id-1]).map( stat => {\r\n                    if(stat !== 'Player' && stat !== 'Position' && stat !== 'Team' && selectedStat.includes(stat)) {\r\n                        const val: number = typeof(players[id-1][stat]) === 'number' ? players[id-1][stat] : Number( (players[id-1][stat]||'0').replace(/[^0-9.]/g, '') );\r\n                        let mark = val === maxStats[stat] ? true : false;\r\n                        return (\r\n                            <ProgressWrap key={stat}>\r\n                                {mark ? \r\n                                    <div>\r\n                                        <small>\r\n                                            <b>{stat} ({players[id-1][stat]})  </b>\r\n                                            <BadgeWrap>     <Badge variant=\"dark\">best</Badge>      </BadgeWrap>\r\n                                        </small>\r\n                                    </div> : \r\n                                    <div><small>{stat} ({players[id-1][stat]})</small></div>\r\n                                }\r\n                                <ProgressDiv>\r\n                                    <Progress maxStat={maxStats[stat]} val={val} id={id} mark={mark}></Progress>\r\n                                </ProgressDiv>\r\n                            </ProgressWrap>\r\n                        )\r\n                    }\r\n                    return null;\r\n                })\r\n                : <div></div>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// styled-components\r\nconst ProgressWrap = styledComponentsTS<any>(styled.div).attrs(props => ({\r\n    key: props.key\r\n}))`\r\n    padding: .35rem .5rem .35rem .5rem\r\n`;\r\n\r\nconst ProgressDiv = styled.div`\r\n    background-color: #E9E9E9;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nconst Progress = styledComponentsTS<any>(styled.div)`\r\n    width: calc(100% * ${props =>props.val} / ${props => props.maxStat});\r\n    height: 10px;\r\n    background-color: ${({id, mark}) => {\r\n        let color = '';\r\n        switch(id){\r\n            case 1: if(mark) color= '#e03131'; else color= '#ff8787'; break;\r\n            case 2: if(mark) color= '#f76707'; else color= '#ffc078'; break;\r\n            case 3: if(mark) color= '#099268'; else color= '#63e6be'; break;\r\n            case 4: if(mark) color= '#3b5bdb'; else color= '#91a7ff'; break;\r\n            case 5: if(mark) color= '#6741d9'; else color= '#b197fc'; break;\r\n        }\r\n        return color;\r\n    }};\r\n    border-radius: 1rem;\r\n    transition: 1s ease;\r\n    transitionDelay: 0.5s;\r\n`;\r\n\r\nconst BadgeWrap = styled.span`\r\n    @media screen and (max-width: 1280px) {\r\n        display: none;\r\n    }\r\n`;\r\n\r\nexport default PlayerBox;","import React from 'react';\r\nimport useTournament from '../hooks/useTournament';\r\nimport usePlayer from '../hooks/usePlayer';\r\nimport StatSelectModal from './StatSelectModal';\r\nimport TournamentSelect from './TournamentSelect';\r\nimport PlayerSelector from './PlayerSelector';\r\nimport PlayerBox from './PlayerBox';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport styled from 'styled-components';\r\n\r\nconst Main = () => {\r\n    const {pending, error} = useTournament();\r\n    const {players} = usePlayer();\r\n\r\n    return (\r\n        <>  \r\n            <Header>\r\n                <b>LOL Pro Stat Comparison</b>\r\n                <MenuWrap>\r\n                    <SelectWrap>\r\n                        <TournamentSelect/>\r\n                    </SelectWrap>\r\n                    <StatSelectModal/>\r\n                </MenuWrap>\r\n            </Header>\r\n            \r\n            <MainContainer>\r\n                <MainWrapper>\r\n                    { pending && \r\n                        <Spinner animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    }\r\n                    { error ? <h1>Sorry. Data could not be loaded.</h1> : \r\n                        <>\r\n                            <PlayerBoxSection id={Object.keys(players[0]).length > 0 ? '1' : '0'}>\r\n                                <PlayerSelector id={1}/>\r\n                                <PlayerBox id={1}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n\r\n                            <PlayerBoxSection id={Object.keys(players[1]).length > 0 ? '2' : '0'}>\r\n                                <PlayerSelector id={2}/>\r\n                                <PlayerBox id={2}></PlayerBox>\r\n                                </PlayerBoxSection>\r\n\r\n                            {Object.keys(players[0]).length>0 && Object.keys(players[1]).length>0 ?\r\n                            <PlayerBoxSection id={Object.keys(players[2]).length > 0 ? '3' : '0'}>\r\n                                <PlayerSelector id={3}/>\r\n                                <PlayerBox id={3}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n                            : <></>}\r\n\r\n                            {Object.keys(players[2]).length>0 ?\r\n                            <PlayerBoxSection id={Object.keys(players[3]).length > 0 ? '4' : '0'}>\r\n                                <PlayerSelector id={4}/>\r\n                                <PlayerBox id={4}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n                            : <></>}\r\n\r\n                            {Object.keys(players[3]).length>0 ?\r\n                            <PlayerBoxSection id={Object.keys(players[4]).length > 0 ? '5' : '0'}>\r\n                                <PlayerSelector id={5}/>\r\n                                <PlayerBox id={5}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n                            : <></>}\r\n                        </>\r\n                    }\r\n                </MainWrapper>\r\n            </MainContainer>\r\n            <Footer>\r\n\r\n            </Footer>\r\n        </>\r\n    );\r\n}\r\n\r\n// styled-components\r\nconst Header = styled.nav`\r\n\tbackground: #343a40;\r\n\tposition: fixed;\r\n\twidth: 100%;\r\n\ttop: 0;\r\n\tleft: 0;\r\n    padding: .5rem 10rem;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    color: white;\r\n    font-size: 1.5em;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 100;\r\n    opacity: 0.9;\r\n\r\n    @media screen and (max-width: 986px) {\r\n        padding-right: 5rem;\r\n        padding-left: 5rem;\r\n    }\r\n\r\n    @media screen and (max-width: 640px) {\r\n        padding-right: 1rem;\r\n        padding-left: 0;\r\n    }\r\n`;\r\n\r\nconst MenuWrap = styled.div`\r\n    display: flex;\r\n    flex-basis: auto;\r\n    flex-grow: 1;\r\n    justify-content: flex-end;\r\n    padding: .5rem 1rem;\r\n    align-items: center;\r\n`;\r\n\r\nconst SelectWrap = styled.div`\r\n    max-width: 250px;\r\n    padding: 0 .5rem 0 .5rem;\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n    background-image: url('background.jpg');\r\n    min-height: 85vh;\r\n    background-color: #eae8e3;\r\n    padding: 70px 10rem 1rem 10rem;\r\n    overflow-y: auto;\r\n\r\n    @media screen and (max-width: 1150px) {\r\n        padding-left: 2rem;\r\n        padding-right: 2rem;\r\n    }\r\n\r\n    @media screen and (max-width: 842px) {\r\n        padding-top: 94px;\r\n        padding-left: 1rem;\r\n        padding-right: 1rem;\r\n    }\r\n\r\n    @media screen and (max-width: 500px) {\r\n        padding-top: 124px;\r\n        padding: 124px 0rem 1rem 0rem;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nconst MainWrapper = styled.main`\r\n    overflow-y: auto;\r\n    padding: 1rem 1rem;\r\n    background: white;\r\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\r\n    margin: 0 auto;\r\n    min-height: 500px;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n\r\n    @media screen and (max-width: 825px) {\r\n        padding: .15rem .15rem;\r\n    }\r\n\r\n    @media screen and (max-width: 500px) {\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nconst PlayerBoxSection = styled.section`\r\n    float: left;\r\n    display: inline-block;\r\n    margin: 10px;\r\n    width: 25%;\r\n    max-width: 230px;\r\n    min-width: 130px;\r\n\r\n    ${({id}: {[k: string]: any}) => {\r\n        if(Number(id) > 0) {\r\n            let color = '';\r\n            switch(Number(id)) {\r\n                case 1 : color= '#ffa8a8'; break;\r\n                case 2 : color= '#ffc078'; break;\r\n                case 3 : color= '#63e6be'; break;\r\n                case 4 : color= '#91a7ff'; break;\r\n                case 5 : color= '#b197fc'; break;\r\n                default : color= '#ccc';\r\n            }\r\n            return `border: solid ${color};\r\n                    border-radius: 10px;`;\r\n        } else\r\n            return `border: solid #ccc;\r\n                    border-style: dashed;\r\n                    border-radius: 10px; `;\r\n    }}\r\n\r\n    @media screen and (max-width: 865px) {\r\n        margin: 5px;\r\n    }\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    min-height: 15vh;\r\n    background: #343a40;\r\n`;\r\n\r\nexport default Main;","import React from 'react';\nimport Main from './components/Main';\n\nfunction App() {\n\n\treturn (\n\t\t<>\n\t\t\t<Main/>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport tournament from './tournament';\r\nimport player from './player';\r\n\r\nconst rootReducer = combineReducers({\r\n    tournament,\r\n    player\r\n});\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux';\nimport rootReducer from './modules';\nimport {Provider} from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(ReduxThunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}