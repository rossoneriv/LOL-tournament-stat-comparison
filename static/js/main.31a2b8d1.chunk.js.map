{"version":3,"sources":["modules/player.ts","hooks/usePlayer.tsx","components/comparison/StatSelectModal.tsx","components/common.tsx","modules/tournament.ts","modules/record.ts","hooks/useRecord.tsx","components/record/SortedListTable.tsx","components/comparison/PlayerSelector.tsx","components/comparison/PlayerBox.tsx","hooks/useTournament.tsx","components/TournamentSelect.tsx","components/CommonHeader.tsx","components/comparison/Comparison.tsx","components/record/StatRanking.tsx","components/record/Record.tsx","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["addPlayer","createAction","id","player","removePlayer","removeAll","changeSelectedStat","flag","stat","allCheckSelectedStat","changeTournament","tournament","getNewMaxStats","position","players","statList","maxStats","i","length","name","Math","max","Number","replace","createReducer","desc","selectedStat","recordStat","recordPosition","state","action","count","newPlayers","map","p","payload","slice","splice","push","filter","item","s","usePlayer","useSelector","data","dispatch","useDispatch","handleAddPlayer","playerActions","handleRemoveSelect","handleChange","e","target","value","handleChangeCheck","checked","handleAllCheck","AddStatButton","styled","div","StatSelectModal","useState","show","setShow","handleClose","onClick","Modal","onHide","Header","closeButton","Title","Body","checkFlag","includes","Form","Check","key","type","label","onChange","Footer","Button","variant","getSortedPlayerList","filterSmallGame","sortCondition","maxGames","apply","Games","Position","sort","p1","p2","sortArr","asc","MainContainer","MainWrapper","main","getTournamentDataAPI","a","axios","get","getTournamentDataAsync","createAsyncAction","getTournamentData","request","success","failure","response","console","log","pending","error","changeStat","selectPosition","addSortCondition","resetSortCondition","toggleShowRegular","showRegular","find","o","delSortCondition","newSortCondition","indexOf","record","useEffect","tournamentActions","recordActions","handleChangeStat","handleSelectPosition","handleAddSortCondition","handleToggleShowRegular","TableHeaderTr","styledComponentsTS","tr","isPlayerSelector","TableBodyTr","idx","TableBodyTd","td","sortCond","TableMargin","table","TableHeader","th","DivFlex","DivAlignCenter","SortedListTable","useRecord","sortMark","getSortCondition","JSON","parse","stringify","Player","statName","ChoosePlayer","PlayerInfo","ImgWrap","InfoWrap","RemovePlayer","PlayerName","h4","ModalBody","ModalStyled","PlayerSelector","Object","keys","src","onError","currentTarget","onerror","alt","ProgressWrap","attrs","props","ProgressDiv","Progress","val","maxStat","mark","color","BadgeWrap","span","PlayerBoxDiv","PlayerBox","Badge","useTournament","TournamentSelect","Control","as","size","placeholder","list","nav","MenuWrap","MenuIconWrap","SelectWrap","DropdownMenu","DropMenuWrap","CommonHeader","to","style","textDecoration","fontWeight","path","mdiMenu","title","horizontal","vertical","className","StatSelectButton","PlayerBoxSection","section","Comparison","Spinner","animation","role","getNotSelectedStat","filterdList","StatRankingWrap","StatRankFirst","StatRankOthers","backColor","RankBoxWrap","RankBoxTitle","RankBox","FirstRankPlayer","FisrtRankPlayerStat","b","OtherRankPlayerStat","StatRanking","IconWrapper","selectedPosition","RecordDiv","TotalTableTitle","RegularCheckWrap","small","Record","App","basename","process","exact","component","Main","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.31a2b8d1.chunk.js","sourcesContent":["import {createAction} from 'redux-actions';\r\nimport {ActionType, createReducer} from 'typesafe-actions';\r\n\r\nconst ADD_PLAYER = 'player/ADD_PLAYER';\r\nconst REMOVE_PLAYER = 'player/REMOVE_PLAYER';\r\nconst REMOVE_ALL = 'player/REMOVE_ALL';\r\nconst CHANGE_SELECTED_STAT = 'player/CHANGE_SELECTED_STAT';\r\nconst ALL_CHECK_SELECTED_STAT = 'player/ALL_CHECK_SELECTED_STAT';\r\nconst CHANGE_TOURNAMNET = 'player/CHANGE_TOURNAMENT';\r\nconst CHANGE_STAT = 'record/CHANGE_STAT';\r\nconst SELECT_POSITION = 'record/SELECT_POSITION';\r\n\r\nexport const addPlayer = createAction(ADD_PLAYER, (id: number, player: object) => ({id, player}));\r\nexport const removePlayer = createAction(REMOVE_PLAYER, (id: number) => id);\r\nexport const removeAll = createAction(REMOVE_ALL);\r\nexport const changeSelectedStat = createAction(CHANGE_SELECTED_STAT, (flag: boolean, stat: string) => ({flag, stat}));\r\nexport const allCheckSelectedStat = createAction(ALL_CHECK_SELECTED_STAT);\r\nexport const changeTournament = createAction(CHANGE_TOURNAMNET, (tournament: string) => tournament);\r\nexport const changeStat = createAction(CHANGE_STAT, (stat: string, id: number) => ({stat, id}));\r\nexport const selectPosition = createAction(SELECT_POSITION, (position: string) => position);\r\n\r\nconst actions = {addPlayer, removePlayer, removeAll, changeSelectedStat, allCheckSelectedStat, changeTournament, changeStat, selectPosition};\r\ntype playerAction = ActionType<typeof actions>;\r\n\r\ntype playerState = {\r\n    players: {[index: string]:any};\r\n    maxStats: {[index: string]:any};\r\n    statList: stat[];\r\n    selectedStat: string[];\r\n    tournament: string;\r\n    recordStat: string[];\r\n    recordPosition: string;\r\n}\r\n\r\ntype stat = {\r\n    name: string,\r\n    desc: string\r\n}\r\n\r\nconst initialState = {\r\n    players: [{}, {}, {}, {}, {}],\r\n    maxStats: {},\r\n    statList: [ {name: 'Games', desc: ''},\r\n                {name: 'Win rate', desc: ''},\r\n                {name: 'KDA', desc: ''},\r\n                {name: 'Avg kills', desc: ''},\r\n                {name: 'Avg deaths', desc: ''},\r\n                {name: 'Avg assists', desc: ''},\r\n                {name: 'CSM', desc: 'Average CS per minute per game'},\r\n                {name: 'GPM', desc: 'Average Gold per minute per game'},\r\n                {name: 'KP%', desc: 'Average Kill Participation per game'},\r\n                {name: 'DMG%', desc: 'Average share of team\\'s total damage to champions per game'},\r\n                {name: 'DPM', desc: 'Average damage to champions per minute per game'},\r\n                {name: 'VSPM', desc: 'Average Vision score per minute per game'},\r\n                {name: 'Avg WPM', desc: 'Average Wards per minute per game'},\r\n                {name: 'Avg WCPM', desc: 'Average Wards cleared per minute per game'},\r\n                {name: 'Avg VWPM', desc: 'Average Vision wards per minute per game'},\r\n                {name: 'GD@15', desc: 'Average Gold differential at 15 min'},\r\n                {name: 'CSD@15', desc: 'Average CS differential at 15 min'},\r\n                {name: 'XPD@15', desc: 'Average XP differential at 15 min'},\r\n                {name: 'FB %', desc: 'Firstblood participation(kill or assist)'},\r\n                {name: 'FB Victim', desc: 'Firstblood victim %'},\r\n                {name: 'Penta Kills', desc: 'Total pentakills'},\r\n                {name: 'Solo Kills', desc: 'Total solokills'}\r\n            ],\r\n    selectedStat: ['Games','Win rate','KDA','Avg kills','Avg deaths','Avg assists','KP%','DMG%','DPM'],\r\n    tournament: 'Mid-Season Cup 2020',\r\n    recordStat: ['KDA', 'KP%', 'DPM', 'GPM', 'Solo Kills'],\r\n    recordPosition: '',\r\n}\r\n\r\nconst getNewMaxStats = (players: any, statList: stat[]) => {\r\n    let maxStats: {[k: string]: any} = {};\r\n    for(let i=0; i<statList.length; i++){\r\n        maxStats[statList[i].name] = \r\n            Math.max( typeof(players[0][statList[i].name]) === 'number' ? players[0][statList[i].name] : Number((players[0][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[1][statList[i].name]) === 'number' ? players[1][statList[i].name] : Number((players[1][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[2][statList[i].name]) === 'number' ? players[2][statList[i].name] : Number((players[2][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[3][statList[i].name]) === 'number' ? players[3][statList[i].name] : Number((players[3][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    , typeof(players[4][statList[i].name]) === 'number' ? players[4][statList[i].name] : Number((players[4][statList[i].name]||'0').replace(/[^0-9.]/g, ''))\r\n                    );\r\n    }\r\n    return maxStats;\r\n}\r\n\r\nconst player = createReducer<playerState, playerAction>(initialState, {\r\n    [ADD_PLAYER]: (state, action) => {\r\n        let count = 0;\r\n        const newPlayers = state.players.map((p: any) => {\r\n            count++;\r\n            return count === action.payload.id ? action.payload.player : p;\r\n        });\r\n        return {...state, players: newPlayers, maxStats: getNewMaxStats(newPlayers, state.statList)}\r\n    },\r\n    [REMOVE_PLAYER]: (state, action) => {\r\n        let newPlayers = state.players.slice();\r\n        newPlayers.splice(action.payload-1, 1);\r\n        newPlayers.push({});\r\n        return {...state, players: newPlayers, maxStats: getNewMaxStats(newPlayers, state.statList)}\r\n    },\r\n    [REMOVE_ALL]: (state) => ({...state, players: [{}, {}, {}, {}, {}]}),\r\n    [CHANGE_SELECTED_STAT]: (state, action) => {\r\n        const {flag, stat} = action.payload;\r\n        if(flag){\r\n            return {...state, selectedStat: [...state.selectedStat, stat]}\r\n        }\r\n        else {\r\n            return {...state, selectedStat: state.selectedStat.filter(item => item !== stat)}\r\n        }\r\n    },\r\n    [ALL_CHECK_SELECTED_STAT]: (state) => {\r\n        const selectedStat = state.statList.length !== state.selectedStat.length ?\r\n                                state.statList.map(item => item.name) :\r\n                                [];\r\n        return {\r\n            ...state,\r\n            selectedStat: selectedStat\r\n        }\r\n    },\r\n    [CHANGE_TOURNAMNET]: (state, action) => {\r\n        return {\r\n            ...state,\r\n            tournament: action.payload\r\n        }\r\n    },\r\n    [CHANGE_STAT]: (state, action) => {\r\n        return {...state, recordStat: [...state.recordStat.map((s, i) => {\r\n            if(i === action.payload.id)  return action.payload.stat;\r\n            else return s;\r\n        })]}\r\n    },\r\n    [SELECT_POSITION]: (state, action) => {\r\n        return {...state, recordPosition: action.payload.position}\r\n    },\r\n});\r\n\r\nexport default player;","import {useDispatch, useSelector} from 'react-redux';\r\nimport * as playerActions from '../modules/player';\r\nimport {RootState} from '../modules';\r\n\r\nconst usePlayer = () => {\r\n    const {players, maxStats, selectedStat, statList, tournament} = useSelector((state: RootState) => state.player);\r\n    const {data} = useSelector((state: RootState) => state.tournament);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleAddPlayer = (p: any, id: number) => {\r\n        dispatch(playerActions.addPlayer(id, p));\r\n    }\r\n\r\n    const handleRemoveSelect = (id: number) => {\r\n        dispatch(playerActions.removePlayer(id));\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(playerActions.changeTournament(e.target.value));\r\n    }\r\n\r\n    const handleChangeCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(playerActions.changeSelectedStat(e.target.checked, e.target.id));\r\n    }\r\n\r\n    const handleAllCheck = () => {\r\n        dispatch(playerActions.allCheckSelectedStat());\r\n    }\r\n\r\n    return {\r\n        players, maxStats, selectedStat, statList, tournament, data, handleAddPlayer, handleRemoveSelect, handleChange, handleChangeCheck, handleAllCheck\r\n    };\r\n}\r\n\r\nexport default usePlayer;","import React, {useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport styled from 'styled-components';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport usePlayer from '../../hooks/usePlayer';\r\n\r\nconst StatSelectModal = () => {\r\n    const {statList, selectedStat, handleChangeCheck, handleAllCheck} = usePlayer();\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <AddStatButton onClick={handleShow}>\r\n                <small><b>Add Stat</b></small>\r\n            </AddStatButton>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Stat View/Hide</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {statList.map( stat => {\r\n                        const {name, desc} = stat;\r\n                        const checkFlag = selectedStat.includes(name) ;\r\n                        return <Form.Check \r\n                                    key={name} \r\n                                    type='checkbox' \r\n                                    id={name} \r\n                                    label={<><b>{name}</b><small>{desc?' - ' + desc:''}</small></>}\r\n                                    onChange={handleChangeCheck} \r\n                                    checked={checkFlag}\r\n                                />\r\n                    })}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleAllCheck}>\r\n                    All Check\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nconst AddStatButton = styled.div`\r\n    border-radius: 20px;\r\n    background-color: #495057;\r\n    color: white;\r\n    width: 60px;\r\n    height: 28px;\r\n    text-align: center;\r\n    text-shadow: 0 0 5px #FFF, 0 0 10px #FFF, 0 0 15px #FFF, 0 0 20px #C0C0C0, 0 0 30px #C0C0C0, 0 0 40px #C0C0C0, 0 0 55px #C0C0C0, 0 0 75px #C0C0C0;\r\n    cursor: pointer;\r\n    box-shadow: 5px 5px 5px gray;\r\n`;\r\n\r\nexport default StatSelectModal;","import styled from 'styled-components';\r\n\r\n\r\nexport const getSortedPlayerList = (item: string|null, \r\n                                    players: object[], \r\n                                    recordPosition: string, \r\n                                    filterSmallGame: boolean, \r\n                                    sortCondition: {stat: string, asc: boolean}[]|null) => {\r\n    \r\n    if(filterSmallGame){\r\n        const maxGames = Math.max.apply(Math, players.map((p: any) => {return p.Games}));\r\n        players = players.filter((p: any) => p.Games >= maxGames*0.25);\r\n    }\r\n\r\n    if(recordPosition){\r\n        players = players.filter((p: any) => p.Position === recordPosition);\r\n    }\r\n    \r\n    if(item !== null && sortCondition === null){\r\n        return players.sort((p1: any, p2: any) => {\r\n            if(p1[item] === '-') p1[item] = 0;\r\n            if(p2[item] === '-') p2[item] = 0;\r\n\r\n            if(typeof(p1[item]) === 'string' ? Number(p1[item].replace(/[^0-9.]/g, '')) > Number(p2[item].replace(/[^0-9.]/g, '')) : p1[item] > p2[item])\r\n                return -1;\r\n            else if(typeof(p1[item]) === 'string' ? Number(p1[item].replace(/[^0-9.]/g, '')) < Number(p2[item].replace(/[^0-9.]/g, '')) : p1[item] < p2[item])    \r\n                return 1;\r\n            else return 0;\r\n        });\r\n    }\r\n    else if(item === null && sortCondition !== null){\r\n        for(let i=0; i<sortCondition.length; i++){\r\n            players.sort((p1: any, p2: any) => {\r\n                let sortArr = [];\r\n                if(sortCondition[i].asc)    sortArr = [1, -1, 0];\r\n                else                        sortArr = [-1, 1, 0];\r\n\r\n                if(p1[sortCondition[i].stat] === '-') p1[sortCondition[i].stat] = 0;\r\n                if(p2[sortCondition[i].stat] === '-') p2[sortCondition[i].stat] = 0;\r\n\r\n                if(sortCondition[i].stat === 'Player' || sortCondition[i].stat === 'Position'){\r\n                    if(p1[sortCondition[i].stat] > p2[sortCondition[i].stat])   return sortArr[0];\r\n                    else if(p1[sortCondition[i].stat] < p2[sortCondition[i].stat])  return sortArr[1];\r\n                    else    return sortArr[2];\r\n                }\r\n                else if(typeof(p1[sortCondition[i].stat]) === 'string' \r\n                    ? Number(p1[sortCondition[i].stat].replace(/[^0-9.]/g, '')) > Number(p2[sortCondition[i].stat].replace(/[^0-9.]/g, '')) \r\n                    : p1[sortCondition[i].stat] > p2[sortCondition[i].stat])\r\n                    return sortArr[0];\r\n                else if(typeof(p1[sortCondition[i].stat]) === 'string' \r\n                    ? Number(p1[sortCondition[i].stat].replace(/[^0-9.]/g, '')) < Number(p2[sortCondition[i].stat].replace(/[^0-9.]/g, '')) \r\n                    : p1[sortCondition[i].stat] < p2[sortCondition[i].stat])    \r\n                    return sortArr[1];\r\n                else return sortArr[2];\r\n            });\r\n        }\r\n        return players;\r\n    }\r\n    else return [];\r\n}\r\n\r\n\r\nexport const getSortCondition = (stat: string, sortCondition: {stat: string, asc: boolean}[]): string => {\r\n    let sortMark: string = '';\r\n    if(sortCondition.find((o: {stat: string, asc: boolean}) => stat === o.stat && o.asc))  sortMark = '↑';\r\n    else if(sortCondition.find((o: {stat: string, asc: boolean}) => stat === o.stat && !o.asc))    sortMark = '↓';\r\n    return sortMark;\r\n}\r\n\r\n// styled-components\r\nexport const MainContainer = styled.div`\r\n    background-image: url('background.jpg');\r\n    min-height: 85vh;\r\n    background-color: #eae8e3;\r\n    padding: 70px 10rem 1rem 10rem;\r\n    overflow-y: auto;\r\n\r\n    @media screen and (max-width: 1150px) {\r\n        padding-left: 2rem;\r\n        padding-right: 2rem;\r\n    }\r\n\r\n    @media screen and (max-width: 842px) {\r\n        padding-top: 94px;\r\n        padding-left: 1rem;\r\n        padding-right: 1rem;\r\n    }\r\n\r\n    @media screen and (max-width: 500px) {\r\n        padding-top: 124px;\r\n        padding: 124px 0rem 1rem 0rem;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const MainWrapper = styled.main`\r\n    overflow-y: auto;\r\n    padding: 1rem 1rem;\r\n    background: white;\r\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\r\n    margin: 0 auto;\r\n    min-height: 500px;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n\r\n    @media screen and (max-width: 825px) {\r\n        padding: .15rem .15rem;\r\n    }\r\n\r\n    @media screen and (max-width: 500px) {\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n    min-height: 15vh;\r\n    background: #343a40;\r\n    color: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;","import {createAction} from 'redux-actions';\r\nimport {createAsyncAction, ActionType, createReducer} from 'typesafe-actions';\r\nimport axios, {AxiosResponse} from 'axios';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from '.';\r\n\r\nasync function getTournamentDataAPI(tournament: string) {\r\n    return await axios.get(`jsonData/${tournament}.json`);\r\n}\r\n\r\nconst GET_TOURNAMENT_DATA_PENDING = 'tournament/GET_TOURNAMENT_DATA_PENDING';\r\nconst GET_TOURNAMENT_DATA_SUCCESS = 'tournament/GET_TOURNAMENT_DATA_SUCCESS';\r\nconst GET_TOURNAMENT_DATA_FAILURE = 'tournament/GET_TOURNAMENT_DATA_FAILURE';\r\nconst CHANGE_TOURNAMNET = 'tournament/CHANGE_TOURNAMENT';\r\n\r\nexport const getTournamentDataAsync = createAsyncAction(\r\n    GET_TOURNAMENT_DATA_PENDING,\r\n    GET_TOURNAMENT_DATA_SUCCESS,\r\n    GET_TOURNAMENT_DATA_FAILURE\r\n)<undefined, AxiosResponse, boolean>();\r\n\r\nexport function getTournamentData(tournament: string): ThunkAction<void, RootState, null, TournamentAction> { \r\n    return async dispatch => {\r\n        const {request, success, failure} = getTournamentDataAsync;\r\n        dispatch(request());\r\n        try{\r\n            const response = await getTournamentDataAPI(tournament);\r\n            dispatch(success(response));\r\n        } catch(error) {\r\n            console.log(error);\r\n            dispatch(failure(true));\r\n            throw(error);\r\n        }\r\n    };\r\n}\r\nexport const changeTournament = createAction(CHANGE_TOURNAMNET, (tournament: string) => tournament);\r\n\r\n\r\n\r\ntype TournametState = {\r\n    pending: boolean;\r\n    error: boolean;\r\n    data: Object[];\r\n}\r\n\r\ntype TournamentAction = ActionType<typeof getTournamentDataAsync>;\r\n\r\n\r\n\r\n\r\n\r\nconst initialState: TournametState = {\r\n    pending: false,\r\n    error: false,\r\n    data: [],\r\n}\r\n\r\n\r\nconst tournament = createReducer<TournametState, TournamentAction>(initialState, {\r\n    [GET_TOURNAMENT_DATA_PENDING] : state => ({\r\n        ...state,\r\n        pending: true,\r\n        error: false\r\n    }),\r\n    [GET_TOURNAMENT_DATA_SUCCESS] : (state, action) => ({\r\n        ...state,\r\n        pending: false,\r\n        data: action.payload.data\r\n    }),\r\n    [GET_TOURNAMENT_DATA_FAILURE]: state => ({\r\n        ...state,\r\n        pending: false,\r\n        error: true\r\n    })\r\n})\r\n\r\nexport default tournament;","import {createAction} from 'redux-actions';\r\nimport {ActionType, createReducer} from 'typesafe-actions';\r\n\r\nconst CHANGE_STAT = 'record/CHANGE_STAT';\r\nconst SELECT_POSITION = 'record/SELECT_POSITION';\r\nconst ADD_SORT_CONDITION = 'record/ADD_SORT_CONDITION';\r\nconst RESET_SORT_CONDITION = 'record/RESET_SORT_CONDITION';\r\nconst TOGGLE_SHOW_REGULAR = 'record/TOGGLE_SHOW_REGULAR';\r\n\r\nexport const changeStat = createAction(CHANGE_STAT, (stat: string, id: number) => ({stat, id}));\r\nexport const selectPosition = createAction(SELECT_POSITION, (position: any) => position);\r\nexport const addSortCondition = createAction(ADD_SORT_CONDITION, (stat: string) => stat);\r\nexport const resetSortCondition = createAction(RESET_SORT_CONDITION);\r\nexport const toggleShowRegular = createAction(TOGGLE_SHOW_REGULAR);\r\n\r\nconst actions = {changeStat, selectPosition, addSortCondition};\r\ntype recordAction = ActionType<typeof actions>;\r\n\r\ntype recordState = {\r\n    recordStat: string[];\r\n    recordPosition: string;\r\n    sortCondition: sortCondition[];\r\n    showRegular: boolean;\r\n}\r\n\r\ntype sortCondition = {\r\n    stat: string;\r\n    asc: boolean;\r\n}\r\n\r\nconst initialState = {\r\n    recordStat: ['KDA', 'KP%', 'DPM', 'GPM', 'Solo Kills'],\r\n    recordPosition: '',\r\n    sortCondition: [],\r\n    showRegular: false,\r\n}\r\n\r\nconst player = createReducer<recordState, recordAction>(initialState, {\r\n    [CHANGE_STAT]: (state, action) => {\r\n        return {...state, recordStat: [...state.recordStat.map((s, i) => {\r\n            if(i === action.payload.id)  return action.payload.stat;\r\n            else return s;\r\n        })]}\r\n    },\r\n    [SELECT_POSITION]: (state, action) => {\r\n        return {...state, recordPosition: action.payload}\r\n    },\r\n    [ADD_SORT_CONDITION]: (state, action) => {\r\n        if(state.sortCondition.find((o: sortCondition) => (o.stat === action.payload && !o.asc))){\r\n            const delSortCondition = state.sortCondition.find((o: sortCondition) => (o.stat === action.payload));\r\n            if(delSortCondition) {\r\n                const newSortCondition = state.sortCondition.slice();\r\n                newSortCondition.splice(state.sortCondition.indexOf(delSortCondition), 1);\r\n                return {...state, sortCondition: [...newSortCondition, {stat: action.payload, asc: true}]};\r\n            }\r\n            else return {...state};\r\n        } else if(state.sortCondition.find((o: sortCondition) => (o.stat === action.payload && o.asc))){\r\n            const delSortCondition = state.sortCondition.find((o: sortCondition) => (o.stat === action.payload));\r\n            if(delSortCondition) {\r\n                const newSortCondition = state.sortCondition.slice();\r\n                newSortCondition.splice(state.sortCondition.indexOf(delSortCondition), 1);\r\n                return {...state, sortCondition: newSortCondition};\r\n            }\r\n            else return {...state};\r\n        } \r\n        else return {...state, sortCondition: [...state.sortCondition, {stat: action.payload, asc: false}]}\r\n    },\r\n    [RESET_SORT_CONDITION]: (state) => {\r\n        return {...state, sortCondition: []}\r\n    },\r\n    [TOGGLE_SHOW_REGULAR]: (state) => {\r\n        return {...state, showRegular: !state.showRegular}\r\n    }\r\n});\r\n\r\nexport default player;","import {useEffect} from 'react';\r\nimport * as tournamentActions from '../modules/tournament';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as recordActions from '../modules/record';\r\nimport {RootState} from '../modules';\r\n\r\nconst usePlayer = () => {\r\n    const {recordStat, recordPosition, sortCondition, showRegular} = useSelector((state: RootState) => state.record);\r\n    const {data} = useSelector((state: RootState) => state.tournament);\r\n    const {tournament} = useSelector((state: RootState) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(tournamentActions.getTournamentData(tournament));\r\n        dispatch(recordActions.selectPosition(''));\r\n        dispatch(recordActions.resetSortCondition());\r\n    }, [dispatch, tournament]);\r\n\r\n    const handleChangeStat = (stat: string, id: number) => {\r\n        dispatch(recordActions.changeStat(stat , id));\r\n    }\r\n\r\n    const handleSelectPosition = (position: string) => {\r\n        dispatch(recordActions.selectPosition(position));\r\n    }\r\n\r\n    const handleAddSortCondition = (stat: string) => {\r\n        dispatch(recordActions.addSortCondition(stat));\r\n    }\r\n\r\n    const handleToggleShowRegular = () => {\r\n        dispatch(recordActions.toggleShowRegular());\r\n    }\r\n\r\n    return {\r\n        recordStat, recordPosition, sortCondition, showRegular, data, handleChangeStat, handleSelectPosition, handleAddSortCondition, handleToggleShowRegular\r\n    };\r\n}\r\n\r\nexport default usePlayer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport styledComponentsTS from 'styled-components-ts';\r\n\r\nimport {getSortedPlayerList, getSortCondition} from '../common';\r\nimport useRecord from '../../hooks/useRecord';\r\n\r\n\r\ntype props = {\r\n    statList: {name: string, desc: string}[],\r\n    recordPosition: string,\r\n    showRegular: boolean,\r\n    id?: number,\r\n    handleClose? : () => void,\r\n    handleAddPlayer? : (e: any, id: number) => void\r\n    isPlayerSelector? : boolean\r\n}\r\n\r\nconst SortedListTable = ({statList, recordPosition, showRegular, id, handleClose, handleAddPlayer, isPlayerSelector}: props) => {\r\n    const {sortCondition, data, handleAddSortCondition} = useRecord();\r\n    \r\n    return (\r\n        <TableMargin>\r\n            <thead>\r\n                <TableHeaderTr isPlayerSelector={isPlayerSelector}>\r\n                    {statList.map((stat) => {\r\n                        return (\r\n                            <TableHeader key={stat.name} onClick={() => {handleAddSortCondition(stat.name)}}>\r\n                                <DivFlex>\r\n                                    <div><small>{stat.name}</small></div>\r\n                                    <DivAlignCenter>{'\\u00A0'}{getSortCondition(stat.name, sortCondition)}</DivAlignCenter>\r\n                                </DivFlex>\r\n                            </TableHeader>\r\n                        );\r\n                    })}\r\n                </TableHeaderTr>\r\n            </thead>\r\n            <tbody>\r\n                {getSortedPlayerList(null, JSON.parse(JSON.stringify(data)), recordPosition, showRegular, sortCondition).map((p: any, i: number)=> {\r\n                    return <TableBodyTr key={`${p.Player}_${p.Position}`} idx={i+1} isPlayerSelector={isPlayerSelector}>\r\n                        {statList.map((stat) => {\r\n                            let sortCond = '';\r\n                            let statName = stat.name;\r\n                            if(sortCondition.length > 0)    sortCond = sortCondition[sortCondition.length - 1].stat;\r\n                            return ( \r\n                                <TableBodyTd \r\n                                    key={statName} \r\n                                    stat={statName} \r\n                                    sortCond={sortCond} \r\n                                    onClick={() => {\r\n                                                if(handleAddPlayer && handleClose && typeof(id) === 'number') {\r\n                                                    handleAddPlayer(p, id); \r\n                                                    handleClose();\r\n                                                }\r\n                                    }}>\r\n                                            <small>{p[statName]}</small>\r\n                                </TableBodyTd>\r\n                            );\r\n                        })}\r\n                    </TableBodyTr>\r\n                })}\r\n            </tbody>\r\n        </TableMargin>\r\n    );\r\n}\r\n\r\nconst TableHeaderTr = styledComponentsTS<any>(styled.tr)`\r\n    border-top-style: double;\r\n    border-bottom-style: double;\r\n    background-color: #495057;\r\n    color: white;\r\n\r\n    ${({isPlayerSelector}) => {\r\n        if(isPlayerSelector)    return 'font-size: 20px';\r\n    }}\r\n`;\r\n\r\nconst TableBodyTr = styledComponentsTS<any>(styled.tr)`\r\n    border-bottom: ${({idx}) => {\r\n        if(idx%5 === 0) return 'groove 2px';\r\n        else    return 'solid 0.5px';\r\n    }};\r\n    border-color: #e0e0e0;\r\n\r\n    ${({isPlayerSelector}) => {\r\n        if(isPlayerSelector)    \r\n            return (\r\n                `font-size: 16px; \r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    background-color: #ddd;\r\n                    td {\r\n                        background-color: #ddd;\r\n                    }\r\n                }\r\n\r\n                td {\r\n                    padding: 0.25rem 0.5rem;\r\n                }\r\n                `);\r\n    }}\r\n`;\r\n\r\nconst TableBodyTd = styledComponentsTS<any>(styled.td)`\r\n    padding: 0 0.5rem;\r\n    background-color: ${({stat, sortCond}) => {\r\n        if(stat === sortCond)   return '#ffc9c9';\r\n        else return '';\r\n    }};\r\n`;\r\n\r\nconst TableMargin = styled.table`\r\n    margin: 0px 1.5rem;\r\n`;\r\n\r\nconst TableHeader = styledComponentsTS<any>(styled.th)`\r\n    padding: 0 0.5rem;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst DivFlex = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst DivAlignCenter = styled.div`\r\n    align-self: center;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport default SortedListTable;","import React, {useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport styled from 'styled-components';\r\nimport styledComponentsTS from 'styled-components-ts';\r\n\r\nimport usePlayer from '../../hooks/usePlayer';\r\nimport SortedListTable from '../record/SortedListTable';\r\n\r\ntype props = {\r\n    id: number;\r\n}\r\n\r\nconst PlayerSelector = ({id}: props) => {\r\n    const {players, handleRemoveSelect, handleAddPlayer} = usePlayer();\r\n    const [show, setShow] = useState(false);\r\n    \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return(\r\n        <>\r\n            {Object.keys(players[id-1]).length === 0 ? \r\n                <ChoosePlayer onClick={handleShow}>\r\n                    <p><b>Choose<br/> Player</b></p>\r\n                </ChoosePlayer> : \r\n                <PlayerInfo>\r\n                    <RemovePlayer onClick={(e) => handleRemoveSelect(id)}>&times;</RemovePlayer>\r\n                    <ImgWrap>\r\n                        <img src={`player/${players[id-1].Player}.png`} onError={(e)=>{e.currentTarget.onerror = null; e.currentTarget.src='player/noplayer.png'}} \r\n                             alt={players[id-1].Player}></img>\r\n                    </ImgWrap>\r\n                    <InfoWrap>\r\n                        <img src={`position/${players[id-1].Position}.png`} alt={players[id-1].Position}></img>\r\n                        <PlayerName>{players[id-1].Player}</PlayerName>\r\n                    </InfoWrap>\r\n                </PlayerInfo>\r\n            }\r\n\r\n            <ModalStyled show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Players</Modal.Title>\r\n                </Modal.Header>\r\n                <ModalBody>\r\n                    <SortedListTable\r\n                        statList={[{name: 'Player', desc: ''}, {name: 'Position', desc: ''}, {name: 'Games', desc: ''}]}\r\n                        recordPosition={''}\r\n                        showRegular={false}\r\n                        id={id}\r\n                        handleClose={handleClose}\r\n                        handleAddPlayer={handleAddPlayer}\r\n                        isPlayerSelector={true}\r\n                    />\r\n                </ModalBody>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </ModalStyled>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// styled-components\r\nconst ChoosePlayer = styled.div`\r\n    // border: solid #ccc;\r\n    // border-style: dashed;\r\n    // border-radius: 25px; \r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    text-shadow: 5px 5px 0 #e2e2e2;\r\n    font-size: 1.5rem;\r\n    color: #909090;\r\n    height: -webkit-fill-available;\r\n    justify-content: center;\r\n    text-align: center;\r\n    background-image: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.8)), url('choose-player.png');\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    min-height: 500px;\r\n`;\r\n\r\nconst PlayerInfo = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    flex-flow: column;\r\n    position: relative;\r\n`;\r\n\r\nconst ImgWrap = styled.div`\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    border-radius: 50%;\r\n    margin: 1rem .3rem .3rem .3rem;\r\n    border: 1px inset;\r\n`;\r\n\r\nconst InfoWrap = styled.div`\r\n    display: flex;\r\n\r\n    @media screen and (max-width: 1420px) {\r\n        flex-flow: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nconst RemovePlayer = styled.div`\r\n    position: absolute;\r\n    top: 3px;\r\n    right: 3px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    font-size: larger;\r\n    padding: 3px 10px;\r\n`;\r\n\r\nconst PlayerName = styled.h4`\r\n    align-self: center;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst ModalBody = styled(Modal.Body)`\r\n    height: 750px;\r\n    overflow-y: scroll;\r\n\r\n    @media screen and (max-width: 1025px) {\r\n        height: 600px;\r\n    }\r\n\r\n    @media screen and (max-width: 480px) {\r\n        height: 500px;\r\n    }\r\n`;\r\n\r\nconst ModalStyled = styledComponentsTS<any>(styled(Modal))`\r\n    .modal-dialog {\r\n        width: fit-content;\r\n    }\r\n`;\r\n\r\nexport default PlayerSelector;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport styledComponentsTS from 'styled-components-ts';\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nimport usePlayer from '../../hooks/usePlayer';\r\n\r\ntype props = {\r\n    id: number;\r\n}\r\n\r\nconst PlayerBox = ({id}: props) => {\r\n    const {players, selectedStat, maxStats} = usePlayer();\r\n\r\n    return (\r\n        <PlayerBoxDiv>\r\n            <div>\r\n                {Object.keys(players[id-1]).length > 0 \r\n                ? Object.keys(players[id-1]).map( stat => {\r\n                    if(stat !== 'Player' && stat !== 'Position' && stat !== 'Team' && selectedStat.includes(stat)) {\r\n                        const val: number = typeof(players[id-1][stat]) === 'number' ? players[id-1][stat] : Number( (players[id-1][stat]||'0').replace(/[^0-9.]/g, '') );\r\n                        let mark = val === maxStats[stat] ? true : false;\r\n                        return (\r\n                            <ProgressWrap key={stat}>\r\n                                {mark ? \r\n                                    <div>\r\n                                        <small>\r\n                                            <b>{stat} ({players[id-1][stat]})  </b>\r\n                                            <BadgeWrap>     <Badge variant=\"dark\">best</Badge>      </BadgeWrap>\r\n                                        </small>\r\n                                    </div> : \r\n                                    <div><small>{stat} ({players[id-1][stat]})</small></div>\r\n                                }\r\n                                <ProgressDiv>\r\n                                    <Progress maxStat={maxStats[stat]} val={val} id={id} mark={mark}></Progress>\r\n                                </ProgressDiv>\r\n                            </ProgressWrap>\r\n                        )\r\n                    }\r\n                    return null;\r\n                })\r\n                : <div></div>}\r\n            </div>\r\n        </PlayerBoxDiv>\r\n    );\r\n}\r\n\r\n\r\n// styled-components\r\nconst ProgressWrap = styledComponentsTS<any>(styled.div).attrs(props => ({\r\n    key: props.key\r\n}))`\r\n    padding: .35rem .5rem .35rem .5rem\r\n`;\r\n\r\nconst ProgressDiv = styled.div`\r\n    background-color: #E9E9E9;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nconst Progress = styledComponentsTS<any>(styled.div)`\r\n    width: calc(100% * ${props =>props.val} / ${props => props.maxStat});\r\n    height: 10px;\r\n    background-color: ${({id, mark}) => {\r\n        let color = '';\r\n        switch(id){\r\n            case 1: if(mark) color= '#e03131'; else color= '#ff8787'; break;\r\n            case 2: if(mark) color= '#f76707'; else color= '#ffc078'; break;\r\n            case 3: if(mark) color= '#099268'; else color= '#63e6be'; break;\r\n            case 4: if(mark) color= '#3b5bdb'; else color= '#91a7ff'; break;\r\n            case 5: if(mark) color= '#6741d9'; else color= '#b197fc'; break;\r\n        }\r\n        return color;\r\n    }};\r\n    border-radius: 1rem;\r\n    transition: 1s ease;\r\n    transitionDelay: 0.5s;\r\n`;\r\n\r\nconst BadgeWrap = styled.span`\r\n    @media screen and (max-width: 1280px) {\r\n        display: none;\r\n    }\r\n`;\r\n\r\nconst PlayerBoxDiv = styled.div`\r\n    padding: 1rem 0 1rem 0;\r\n`;\r\n\r\nexport default PlayerBox;","import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as tournamentActions from '../modules/tournament';\r\nimport * as playerActions from '../modules/player';\r\nimport {RootState} from '../modules';\r\n\r\nconst useTournament = () => {\r\n    const {pending, error, data} = useSelector((state: RootState) => state.tournament);\r\n    const {tournament} = useSelector((state: RootState) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(tournamentActions.getTournamentData(tournament));\r\n        dispatch(playerActions.removeAll());\r\n    }, [dispatch, tournament]);\r\n\r\n    return {\r\n        pending, error, data\r\n    };\r\n}\r\n\r\nexport default useTournament;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport usePlayer from '../hooks/usePlayer';\r\n\r\nconst TournamentSelect = () => {\r\n    const {handleChange, tournament} = usePlayer();\r\n    const tournamentList = [\r\n        'Mid-Season Cup 2020',\r\n        'LCK Spring 2020',\r\n        'LPL Spring 2020',\r\n        'LEC Spring 2020',\r\n        'LCS Spring 2020',\r\n        'World Championship 2019',\r\n        'LCK Summer 2019',\r\n        'LPL Summer 2019',\r\n        'LEC Summer 2019',\r\n        'LCS Summer 2019',\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Form.Control as='select' size='sm' placeholder=\"Select tournament\" onChange={handleChange} value={tournament}>\r\n                {tournamentList.map(list => <option key={list}>{list}</option>)}\r\n            </Form.Control>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TournamentSelect;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport TournamentSelect from './TournamentSelect';\r\nimport Icon from '@mdi/react';\r\nimport { mdiMenu } from '@mdi/js';\r\nimport styled from 'styled-components';\r\n\r\nconst CommonHeader = () => {\r\n\r\n    return (\r\n        <Header>\r\n            <Link to=\"/\" style={{textDecoration: 'none', color: 'white', fontWeight: 'bold'}}>LOL Pro Stat Comparison</Link>\r\n            <MenuWrap>\r\n                <SelectWrap>\r\n                    <TournamentSelect/>\r\n                </SelectWrap>\r\n                <DropMenuWrap>\r\n                    <MenuIconWrap>\r\n                        <Icon path={mdiMenu} title='Select Menu' size={2} horizontal vertical/>\r\n                        <DropdownMenu className=\"dropMenuWrap\"> \r\n                            <Link to=\"/\" className='linkMenu' style={{textDecoration: 'none', color: 'black'}}><small>Comparison</small></Link>\r\n                            <Link to=\"/record\" className='linkMenu' style={{textDecoration: 'none', color: 'black'}}><small>Record</small></Link>\r\n                        </DropdownMenu>\r\n                    </MenuIconWrap>\r\n                </DropMenuWrap>\r\n            </MenuWrap>\r\n        </Header>\r\n    );\r\n}\r\n\r\nconst Header = styled.nav`\r\n\tbackground: #343a40;\r\n\tposition: fixed;\r\n\twidth: 100%;\r\n\ttop: 0;\r\n\tleft: 0;\r\n    padding: .5rem 10rem;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    color: white;\r\n    font-size: 1.5em;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 100;\r\n    opacity: 0.9;\r\n\r\n    @media screen and (max-width: 986px) {\r\n        padding-right: 5rem;\r\n        padding-left: 5rem;\r\n    }\r\n\r\n    @media screen and (max-width: 640px) {\r\n        padding-right: 1rem;\r\n        padding-left: 0;\r\n    }\r\n`;\r\n\r\nconst MenuWrap = styled.div`\r\n    display: flex;\r\n    flex-basis: auto;\r\n    flex-grow: 1;\r\n    justify-content: flex-end;\r\n    padding: .5rem 1rem;\r\n    align-items: center;\r\n`;\r\n\r\nconst MenuIconWrap = styled.div`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst SelectWrap = styled.div`\r\n    max-width: 250px;\r\n    padding: 0 .5rem 0 .5rem;\r\n`;\r\n\r\nconst DropdownMenu = styled.div`\r\n    display: none;\r\n    position: absolute;\r\n    background-color: #f1f1f1;\r\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\r\n    z-index: 10;\r\n    left: -10px;\r\n    width: auto;\r\n    border-radius: 5px;\r\n\r\n    .linkMenu {\r\n        padding: 5px 10px;\r\n        text-decoration: none;\r\n        display: block;\r\n        border-bottom: 0.5px solid #ddd;\r\n        font: initial;\r\n    }\r\n    .linkMenu:hover {\r\n        background-color: #ddd;\r\n        border-radius: 5px;\r\n    }\r\n`;\r\n\r\nconst DropMenuWrap = styled.div`\r\n    position: relative;\r\n    display: inline-block;\r\n\r\n    &:hover .dropMenuWrap {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nexport default CommonHeader;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport StatSelectModal from './StatSelectModal';\r\nimport { MainContainer, MainWrapper, Footer} from '../common';\r\nimport PlayerSelector from './PlayerSelector';\r\nimport PlayerBox from './PlayerBox';\r\nimport useTournament from '../../hooks/useTournament';\r\nimport usePlayer from '../../hooks/usePlayer';\r\nimport CommonHeader from '../CommonHeader';\r\n\r\nconst Comparison = () => {\r\n    const {pending, error} = useTournament();\r\n    const {players} = usePlayer();\r\n\r\n    return (\r\n        <>  \r\n            <CommonHeader/>\r\n            <MainContainer>\r\n                <StatSelectButton>\r\n                    <StatSelectModal/>\r\n                </StatSelectButton>\r\n                <MainWrapper>\r\n                    { pending && \r\n                        <Spinner animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    }\r\n                    { error ? <h1>Sorry. Data could not be loaded.</h1> : \r\n                        <>\r\n                            <PlayerBoxSection id={Object.keys(players[0]).length > 0 ? '1' : '0'}>\r\n                                <PlayerSelector id={1}/>\r\n                                <PlayerBox id={1}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n\r\n                            <PlayerBoxSection id={Object.keys(players[1]).length > 0 ? '2' : '0'}>\r\n                                <PlayerSelector id={2}/>\r\n                                <PlayerBox id={2}></PlayerBox>\r\n                                </PlayerBoxSection>\r\n\r\n                            {Object.keys(players[0]).length>0 && Object.keys(players[1]).length>0 ?\r\n                            <PlayerBoxSection id={Object.keys(players[2]).length > 0 ? '3' : '0'}>\r\n                                <PlayerSelector id={3}/>\r\n                                <PlayerBox id={3}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n                            : <></>}\r\n\r\n                            {Object.keys(players[2]).length>0 ?\r\n                            <PlayerBoxSection id={Object.keys(players[3]).length > 0 ? '4' : '0'}>\r\n                                <PlayerSelector id={4}/>\r\n                                <PlayerBox id={4}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n                            : <></>}\r\n\r\n                            {Object.keys(players[3]).length>0 ?\r\n                            <PlayerBoxSection id={Object.keys(players[4]).length > 0 ? '5' : '0'}>\r\n                                <PlayerSelector id={5}/>\r\n                                <PlayerBox id={5}></PlayerBox>\r\n                            </PlayerBoxSection>\r\n                            : <></>}\r\n                        </>\r\n                    }\r\n                </MainWrapper>\r\n            </MainContainer>\r\n            <Footer>\r\n                <p> &copy; 2020. Cheol-Woo Noh Website All Rights Reserved.</p>\r\n            </Footer>\r\n        </>\r\n    );\r\n}\r\n\r\nconst StatSelectButton = styled.div`\r\n    position: fixed;\r\n    top: 100px;\r\n    left: 180px;\r\n    zIndex: 100;\r\n\r\n    @media screen and (max-width: 1150px) {\r\n        left: 25px;\r\n    }\r\n\r\n    @media screen and (max-width: 321px) {\r\n        top: 130px;\r\n        left: 5px;\r\n    }\r\n`;\r\n\r\nconst PlayerBoxSection = styled.section`\r\n    float: left;\r\n    display: inline-block;\r\n    margin: 10px;\r\n    width: 25%;\r\n    max-width: 230px;\r\n    min-width: 130px;\r\n\r\n    ${({id}: {[k: string]: any}) => {\r\n        if(Number(id) > 0) {\r\n            let color = '';\r\n            switch(Number(id)) {\r\n                case 1 : color= '#ffa8a8'; break;\r\n                case 2 : color= '#ffc078'; break;\r\n                case 3 : color= '#63e6be'; break;\r\n                case 4 : color= '#91a7ff'; break;\r\n                case 5 : color= '#b197fc'; break;\r\n                default : color= '#ccc';\r\n            }\r\n            return `border: solid ${color};\r\n                    border-radius: 10px;`;\r\n        } else\r\n            return `border: solid #ccc;\r\n                    border-style: dashed;\r\n                    border-radius: 10px; `;\r\n    }}\r\n\r\n    @media screen and (max-width: 865px) {\r\n        margin: 5px;\r\n    }\r\n`;\r\n\r\nexport default Comparison;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport styled from 'styled-components';\r\nimport styledComponentsTS from 'styled-components-ts';\r\n\r\nimport useRecord from '../../hooks/useRecord';\r\nimport usePlayer from '../../hooks/usePlayer';\r\nimport {getSortedPlayerList} from '../common';\r\n\r\nconst StatRanking = () => {\r\n    const {recordStat, recordPosition, data, handleChangeStat} = useRecord();\r\n    const {statList} = usePlayer();\r\n\r\n    return (\r\n        <RankBoxWrap>\r\n            <h3><RankBoxTitle>Stat Ranking</RankBoxTitle></h3>\r\n            <RankBox>\r\n            {recordStat.map((item, idx) => {\r\n                return (\r\n                    <StatRankingWrap key={`${item}_${idx}`}>\r\n                        <Form.Control as='select' size='sm' onChange={(e) => {handleChangeStat(e.currentTarget.value, idx)}} value={recordStat[idx]}>\r\n                            {getNotSelectedStat(item, statList, recordStat).map(list => <option key={list.name}>{list.name}</option>)}\r\n                        </Form.Control>\r\n\r\n                        {data.length > 0 ? getSortedPlayerList(item, JSON.parse(JSON.stringify(data)), recordPosition, true, null).map((p: any, i: number) => {\r\n                            if(i < 5){\r\n                                if(i === 0)  return(\r\n                                    <StatRankFirst key={`${p.Player}_${p.Position}`}><b> {i+1}</b>\r\n                                        <ImgWrap>\r\n                                            <img src={`player/${p.Player}.png`} \r\n                                                alt={p.Player} \r\n                                                onError={(e)=>{\r\n                                                    e.currentTarget.onerror = null; \r\n                                                    e.currentTarget.src='player/noplayer.png'\r\n                                                }}\r\n                                            />\r\n                                        </ImgWrap>\r\n                                        <FirstRankPlayer>\r\n                                            <b>{p.Player}</b><br/>\r\n                                            <FisrtRankPlayerStat>{p[item]}</FisrtRankPlayerStat>\r\n                                        </FirstRankPlayer>\r\n                                    </StatRankFirst>\r\n                                );\r\n\r\n                                let backColor = ''\r\n                                if(i%2 === 0) backColor= 'white';\r\n                                else         backColor= '#f1f3f5';\r\n                                return (\r\n                                    <StatRankOthers key={`${p.Player}_${p.Position}`} backColor={backColor}>\r\n                                        <div>{i+1}{'\\u00A0'}{'\\u00A0'}</div>\r\n                                        <div>{p.Player}</div>\r\n                                        <OtherRankPlayerStat>{p[item]}</OtherRankPlayerStat>\r\n                                    </StatRankOthers>\r\n                                );\r\n                            }\r\n                            else return null;\r\n                        }) : null}\r\n                    </StatRankingWrap>\r\n                );\r\n            })}\r\n            </RankBox>\r\n        </RankBoxWrap>\r\n    );\r\n}\r\n\r\nconst getNotSelectedStat = (item: string, statList: { name: string; desc: string; }[], recordStat: string[]) => {\r\n    const filterdList = recordStat.filter(stat => stat !== item);\r\n    return statList.filter(stat => !filterdList.includes(stat.name));\r\n}\r\n\r\nconst StatRankingWrap = styled.section`\r\n    float: left;\r\n    display: inline-block;\r\n    margin: 10px;\r\n`;\r\n\r\nconst ImgWrap = styled.div`\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    border-radius: 50%;\r\n    margin: 1rem .3rem .3rem .3rem;\r\n    border: 1px inset;\r\n`;\r\n\r\nconst StatRankFirst = styled.div`\r\n    display: flex;\r\n    border: solid 0.5px;\r\n    border-color: #e0e0e0;\r\n    padding: 0.5rem 0.65rem;\r\n`;\r\n\r\nconst StatRankOthers = styledComponentsTS<any>(styled.div)`\r\n    border: solid 0.5px;\r\n    border-color: #e0e0e0;\r\n    display: flex;\r\n    padding: 0.25rem 0.65rem;\r\n    background-color: ${({backColor}) => {\r\n        return backColor;\r\n    }};\r\n`;\r\n\r\nconst RankBoxWrap = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst RankBoxTitle = styled.span`\r\n    padding: 0.1rem 2rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst RankBox = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 0 1.5rem;\r\n    flex-wrap: wrap;\r\n    overflow-y: auto;\r\n    justify-content: center;\r\n`;\r\n\r\nconst FirstRankPlayer = styled.span`\r\n    align-self: center;\r\n    text-align: center;\r\n`;\r\n\r\nconst FisrtRankPlayerStat = styled.b`\r\n    color: #7048e8;\r\n`;\r\n\r\nconst OtherRankPlayerStat = styled.div`\r\n    text-align: right;\r\n    width: -webkit-fill-available;\r\n`;\r\n\r\nexport default StatRanking;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport styled from 'styled-components';\r\nimport styledComponentsTS from 'styled-components-ts';\r\n\r\nimport {MainContainer, MainWrapper, Footer} from '../common';\r\nimport usePlayer from '../../hooks/usePlayer';\r\nimport useRecord from '../../hooks/useRecord';\r\nimport CommonHeader from '../CommonHeader';\r\nimport StatRanking from './StatRanking';\r\nimport SortedListTable from './SortedListTable';\r\n\r\nconst Record = () => {\r\n    const {statList} = usePlayer();\r\n    const {recordPosition, showRegular, handleSelectPosition, handleToggleShowRegular} = useRecord();\r\n\r\n    return(\r\n        <>\r\n            <CommonHeader/>\r\n            \r\n            <MainContainer>\r\n                <MainWrapper>\r\n                    <RecordDiv className='first'>\r\n                        <RecordDiv className='second'>\r\n                            <IconWrapper selectedPosition={recordPosition === ''}>\r\n                                <img src={`position/ALL.png`} alt={'ALL'} onClick={() => {handleSelectPosition('')}}></img>\r\n                            </IconWrapper>\r\n                            <IconWrapper selectedPosition={recordPosition === 'TOP'}>\r\n                                <img src={`position/TOP.png`} alt={'TOP'} onClick={() => {handleSelectPosition('TOP')}}></img>\r\n                            </IconWrapper>\r\n                            <IconWrapper selectedPosition={recordPosition === 'JUNGLE'}>\r\n                                <img src={`position/JUNGLE.png`} alt={'JUNGLE'} onClick={() => {handleSelectPosition('JUNGLE')}}></img>\r\n                            </IconWrapper>\r\n                            <IconWrapper selectedPosition={recordPosition === 'MID'}>\r\n                                <img src={`position/MID.png`} alt={'MID'} onClick={() => {handleSelectPosition('MID')}}></img>\r\n                            </IconWrapper>\r\n                            <IconWrapper selectedPosition={recordPosition === 'ADC'}>\r\n                                <img src={`position/ADC.png`} alt={'ADC'} onClick={() => {handleSelectPosition('ADC')}}></img>\r\n                            </IconWrapper>\r\n                            <IconWrapper selectedPosition={recordPosition === 'SUPPORT'}>\r\n                                <img src={`position/SUPPORT.png`} alt={'SUPPORT'} onClick={() => {handleSelectPosition('SUPPORT')}}></img>\r\n                            </IconWrapper>\r\n                        </RecordDiv>\r\n                        <StatRanking/>\r\n                    </RecordDiv>\r\n\r\n                    <RecordDiv className='tableWrap'>\r\n                        <h3><TotalTableTitle>Total List</TotalTableTitle></h3>\r\n                        <RegularCheckWrap>\r\n                            <Form.Check type='checkbox' label='Only show regular player' onClick={handleToggleShowRegular}></Form.Check>\r\n                        </RegularCheckWrap>\r\n                        <SortedListTable \r\n                            statList={[{name: 'Player', desc: ''}, {name: 'Position', desc: ''}, ...statList]}\r\n                            recordPosition={recordPosition}\r\n                            showRegular={showRegular}\r\n                        />\r\n                    </RecordDiv>\r\n                </MainWrapper>\r\n            </MainContainer>\r\n            <Footer>\r\n                <p> &copy; 2020. Cheol-Woo Noh Website All Rights Reserved.</p>\r\n            </Footer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst IconWrapper = styledComponentsTS<any>(styled.div)`\r\n    width: 60px;\r\n    height: fit-content;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    ${({selectedPosition}) => {\r\n        if(selectedPosition)    return 'opacity: 1';\r\n        else                    return 'opacity: 0.25';\r\n    }}\r\n`;\r\n\r\nconst RecordDiv = styled.div`\r\n    display: flex;\r\n\r\n    &.first {\r\n        flex-direction: column;\r\n    }\r\n\r\n    &.second {\r\n        align-self: center;\r\n        margin-top: 10px;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    &.tableWrap {\r\n        overflow-x: scroll;\r\n        margin-top: 50px;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nconst TotalTableTitle = styled.span`\r\n    padding: 0.1rem 2rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst RegularCheckWrap = styled.small`\r\n    padding: 0.1rem 2rem;\r\n`;\r\n\r\nexport default Record;","import React from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\n\r\nimport Main from './components/comparison/Comparison';\r\nimport Record from './components/record/Record';\r\n\r\nfunction App() {\r\n\r\n\treturn (\r\n\t\t<HashRouter basename={process.env.PUBLIC_URL}>\r\n\t\t\t<Route exact path=\"/\" component={Main}/>\r\n\t\t\t<Route path=\"/record\" component={Record}/>\r\n\t\t</HashRouter>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport tournament from './tournament';\r\nimport player from './player';\r\nimport record from './record';\r\n\r\nconst rootReducer = combineReducers({\r\n    tournament,\r\n    player,\r\n    record\r\n});\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux';\nimport rootReducer from './modules';\nimport {Provider} from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(ReduxThunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}